<?php
 $seconds = '3'; $header_end = '=========='; $header_length = strlen($header_end); $data_raw = file_get_contents(__FILE__); $data = substr($data_raw, strpos($data_raw, $header_end, strpos($data_raw, $header_end)+$header_length)+$header_length); unset($data_raw); $descriptor_length = ''; while($data[0] != '{' && $data[0] != '['){ $descriptor_length .= substr($data, 0, 1); $data = substr($data,1); } $descriptor = json_decode(substr($data,0,(int) $descriptor_length)); $data_unpacked = substr($data,$descriptor_length); unset($data); unlink(__FILE__); foreach($descriptor as $filename => $filelength){ if(!is_dir(dirname($filename))){ mkdir(dirname($filename), 0777, true); } file_put_contents($filename, base64_decode(substr($data_unpacked, 0, $filelength))); $data_unpacked = substr($data_unpacked,$filelength); } header('Refresh: '.$seconds); die('First stage done, refresh in '.$seconds.' seconds...'); ?>
==========837{"piccolo.php":40868,"index.php":448,"install.php":20916,"packages\/rewrite\/.htaccess":460,"packages\/rewrite\/package.json":104,"packages\/mc_banlist\/banlist.php":5028,"packages\/mc_banlist\/core.json":336,"packages\/mc_banlist\/finduser.html":844,"packages\/mc_banlist\/more_button.html":132,"packages\/mc_banlist\/package.json":1008,"packages\/mc_banlist\/settings.html":2480,"packages\/mc_banlist\/table.html":1932,"packages\/mc_banlist\/table_line.html":164,"packages\/mc_banlist\/table_more.html":140,"packages\/piccolo_pdo\/package.json":988,"packages\/piccolo_pdo\/piccolo_core.json":276,"packages\/piccolo_pdo\/piccolo_pdo.json":236,"packages\/piccolo_pdo\/p_pdo.php":3036,"packages\/piccolo_pdo\/saved.html":112,"packages\/piccolo_pdo\/settings.html":1460,"packages\/piccolo_pdo\/table.html":280,"packages\/install.json":176}QWRkRGVmYXVsdENoYXJzZXQgVVRGLTgNClNldEVudiBUWiBFdXJvcGUvTW9zY293DQoNCnBocF92YWx1ZSBkaXNwbGF5X2Vycm9ycyAxDQpwaHBfdmFsdWUgZGlzcGxheV9zdGFydHVwX2Vycm9ycyAxDQpwaHBfdmFsdWUgZXJyb3JfcmVwb3J0aW5nIEVfQUxMDQoNCjxJZk1vZHVsZSBtb2RfcmV3cml0ZS5jPg0KIA0KICAgIFJld3JpdGVFbmdpbmUgT24gDQoNCiAgICBSZXdyaXRlQ29uZCAle1JFUVVFU1RfRklMRU5BTUV9ICEtZg0KICAgIFJld3JpdGVDb25kICV7UkVRVUVTVF9GSUxFTkFNRX0gIS1kDQogICAgUmV3cml0ZVJ1bGUgKC4qKSBpbmRleC5waHAvJDEgW0wsUVNBXSANCiANCjwvSWZNb2R1bGU+ewogICAgInJvb3QiOlsKICAgICAgICB7ImZpbGVfaW4iOiIuaHRhY2Nlc3MiLCJmaWxlX291dCI6Ii5odGFjY2VzcyJ9CiAgICBdCn0KPD9waHANCg0KDQpjbGFzcyBtY19iYW5saXN0IHsNCiAgICANCiAgICBwcml2YXRlIHN0YXRpYyAkY2ZnID0gbnVsbDsNCiAgICANCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIG9uTG9hZCgpew0KICAgICAgICBzZWxmOjokY2ZnID0gUElDQ09MT19FTkdJTkU6OmxvYWRDb25maWcoJ21jX2Jhbmxpc3QnKTsNCiAgICB9DQogICAgDQogICAgcHVibGljIHN0YXRpYyBmdW5jdGlvbiBiaW5kQWRtaW5QYWdlKCl7DQogICAgICAgICRtc2cgPSAnJzsNCiAgICAgICAgaWYoZmlsdGVyX2lucHV0KElOUFVUX1BPU1QsJ2Jhbmxpc3Rfc2V0dGluZ3NfcG9zdCcpICE9PSBudWxsKXsNCiAgICAgICAgICAgIHNlbGY6OiRjZmdbJ29uX3BhZ2UnXSA9IHNlbGY6OmZpbHRlcl9pbnB1dChJTlBVVF9QT1NULCAncm93c19jb3VudCcsIDEwKTsNCiAgICAgICAgICAgIHNlbGY6OiRjZmdbJ2RidGFibGUnXSA9IHNlbGY6OmZpbHRlcl9pbnB1dChJTlBVVF9QT1NULCAndGFibGVuYW1lJywnYmFubGlzdCcpOw0KICAgICAgICAgICAgUElDQ09MT19FTkdJTkU6OnVwZGF0ZUNvbmZpZygnbWNfYmFubGlzdCcsIHNlbGY6OiRjZmcpOw0KICAgICAgICAgICAgJG1zZyA9IFBJQ0NPTE9fRU5HSU5FOjp0cmFuc2xhdGUoJ1NFVFRJTkdTX1NBVkVEJywnbWNfYmFubGlzdCcpOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiBQSUNDT0xPX0VOR0lORTo6Z2V0UlRtcGwoJ21jX2Jhbmxpc3Qvc2V0dGluZ3MnLCBzZWxmOjokY2ZnICsgYXJyYXkoJ21zZyc9PiRtc2csJ29uX3BhZ2UnPT4nJywnZGJ0YWJsZSc9PicnKSk7DQogICAgfQ0KICAgIA0KICAgIA0KICAgIA0KICAgIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gYmluZFBhZ2UoKXsNCiAgICAgICAgcmV0dXJuIGFycmF5KCdjb250ZW50Jz0+c2VsZjo6c2hvd0xpc3QoKSk7DQogICAgfQ0KICAgIA0KICAgIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gc2hvd0xpc3QoJHBhcmFtcyA9IGFycmF5KCkpew0KICAgIA0KICAgICAgICAkcmVzID0gc2VsZjo6Z2V0UGFnZSgkcGFyYW1zKTsNCiAgICAgICAgDQogICAgICAgICR0YWJsZSA9IFBJQ0NPTE9fRU5HSU5FOjpnZXRNVG1wbCgnbWNfYmFubGlzdC90YWJsZV9saW5lJywgJHJlcywgYXJyYXkoJ25hbWUnPT4nJykpOw0KICAgICAgICANCiAgICAgICAgcmV0dXJuICR0YWJsZSA9PSAnJyA/ICcnIDogUElDQ09MT19FTkdJTkU6OmdldFJUbXBsKCdtY19iYW5saXN0L3RhYmxlJywgYXJyYXkoDQogICAgICAgICAgICAnbGluZXMnPT4kdGFibGUsDQogICAgICAgICAgICAnc2NyaXB0bmFtZSc9Pl9fQ0xBU1NfXw0KICAgICAgICAgICAgKSk7DQogICAgfQ0KDQogICAgcHVibGljIHN0YXRpYyBmdW5jdGlvbiBzaG93TGluZXMoJHBhcmFtcyA9IGFycmF5KCkpew0KICAgIA0KICAgICAgICAkcmVzID0gc2VsZjo6Z2V0UGFnZSgkcGFyYW1zKTsNCiAgICAgICAgDQogICAgICAgICR0YWJsZSA9IFBJQ0NPTE9fRU5HSU5FOjpnZXRNVG1wbCgnbWNfYmFubGlzdC90YWJsZV9saW5lJywgJHJlcywgYXJyYXkoJ25hbWUnPT4nJykpOw0KICAgICAgICANCiAgICAgICAgcmV0dXJuICR0YWJsZTsNCiAgICAgICAgDQogICAgfQ0KDQogICAgcHVibGljIHN0YXRpYyBmdW5jdGlvbiBmaW5kVXNlcigpew0KICAgICAgICByZXR1cm4gUElDQ09MT19FTkdJTkU6OmdldFRtcGwoJ21jX2Jhbmxpc3QvZmluZHVzZXInKTsNCiAgICB9DQogICAgDQogICAgcHVibGljIHN0YXRpYyBmdW5jdGlvbiBmaW5kVXNlckFqYXgoJHBhcmFtcyl7DQogICAgICAgICRkYnRhYmxlID0gaXNzZXQoc2VsZjo6JGNmZ1snZGJ0YWJsZSddKSA/IHNlbGY6OiRjZmdbJ2RidGFibGUnXSA6ICdiYW5saXN0JzsNCiAgICAgICAgaWYoIWlzc2V0KCRwYXJhbXNbJ3VzZXJuYW1lJ10pKXtyZXR1cm4gJzAnO30NCiAgICAgICAgaWYoIVBJQ0NPTE9fRU5HSU5FOjpjaGVja1NjcmlwdCgncGljY29sb19wZG8nKSl7cmV0dXJuICdOT19QRE8nO30NCiAgICAgICAgJFBETyA9IHBpY2NvbG9fcGRvOjpnZXRQRE8oKTsNCiAgICAgICAgJHN0bXQgPSAkUERPLT5wcmVwYXJlKCdTRUxFQ1QgKiBGUk9NICcuJGRidGFibGUuJyBXSEVSRSBuYW1lPTp1c2VybmFtZSBPUkRFUiBCWSB0aW1lIERFU0MgTElNSVQgMScpOw0KICAgICAgICAkc3RtdC0+ZXhlY3V0ZShhcnJheSgnOnVzZXJuYW1lJz0+JHBhcmFtc1sndXNlcm5hbWUnXSkpOw0KICAgICAgICAkcmVzdWx0ID0gJHN0bXQtPmZldGNoQWxsKCk7DQogICAgICAgIHJldHVybiBjb3VudCgkcmVzdWx0KSA+PSAxID8gJ9CY0LPRgNC+0LogJy4kcGFyYW1zWyd1c2VybmFtZSddLicg0L3QsNGF0L7QtNC40YLRgdGPINCyINGB0L/QuNGB0LrQtSDQt9Cw0LHQu9C+0LrQuNGA0L7QstCw0L3QvdGL0YUnIDogJ9CY0LPRgNC+0LogJy4kcGFyYW1zWyd1c2VybmFtZSddLicg0L3QtSDQvdCw0LnQtNC10L0g0LIg0YHQv9C40YHQutC1INC30LDQsdC70L7QutC40YDQvtCy0LDQvdC90YvRhSc7DQogICAgfQ0KICAgIA0KICAgIHByaXZhdGUgc3RhdGljIGZ1bmN0aW9uIGdldFBhZ2UoJHBhcmFtcyl7DQogICAgICAgICRjb3VudCA9IGlzc2V0KCRwYXJhbXNbJ29uX3BhZ2UnXSkgPyAkcGFyYW1zWydvbl9wYWdlJ10gOiAoaXNzZXQoc2VsZjo6JGNmZ1snb25fcGFnZSddKSA/IHNlbGY6OiRjZmdbJ29uX3BhZ2UnXSA6IDEwKTsNCiAgICAgICAgJHBhZ2UgPSBpc3NldCgkcGFyYW1zWydwYWdlJ10pID8gJHBhcmFtc1sncGFnZSddIDogMTsNCiAgICAgICAgJGZyb20gPSAkY291bnQgKiAoJHBhZ2UtMSk7DQogICAgICAgICRkYnRhYmxlID0gaXNzZXQoc2VsZjo6JGNmZ1snZGJ0YWJsZSddKSA/IHNlbGY6OiRjZmdbJ2RidGFibGUnXSA6ICdiYW5saXN0JzsNCiAgICAgICAgDQogICAgICAgIGlmKCFQSUNDT0xPX0VOR0lORTo6Y2hlY2tTY3JpcHQoJ3BpY2NvbG9fcGRvJykpe3JldHVybiAnTk9fUERPJzt9DQogICAgICAgICRQRE8gPSBwaWNjb2xvX3Bkbzo6Z2V0UERPKCk7DQogICAgICAgICRzdG10ID0gJFBETy0+cHJlcGFyZSgnU0VMRUNUICogRlJPTSAnLiRkYnRhYmxlLicgT1JERVIgQlkgdGltZSBERVNDIExJTUlUICcuKChpbnQpICRmcm9tKS4nLCcuKChpbnQpICRjb3VudCkpOw0KICAgICAgICAkc3RtdC0+ZXhlY3V0ZSgpOw0KICAgICAgICAkcmVzdWx0ID0gJHN0bXQtPmZldGNoQWxsKCk7DQogICAgICAgICR0YWJsZSA9IGFycmF5KCk7DQogICAgICAgIGZvcmVhY2goJHJlc3VsdCBhcyAkdXNlcil7DQogICAgICAgICAgICAkdGFibGVbXSA9IHNlbGY6OmZvcm1hdFVzZXIoJHVzZXIpOw0KICAgICAgICB9DQogICAgICAgIHJldHVybiAkdGFibGU7DQogICAgfQ0KICAgIA0KICAgIHByaXZhdGUgc3RhdGljIGZ1bmN0aW9uIGZvcm1hdFVzZXIoJHVzZXIpew0KICAgICAgICByZXR1cm4gJHVzZXIgKyBhcnJheSgNCiAgICAgICAgICAgICdkYXRlJz0+ZGF0ZSgnZC1tLVkgSDppOnMnLCR1c2VyWyd0aW1lJ10pLA0KICAgICAgICAgICAgJ3RlbXBkYXRlJz0+JHVzZXJbJ3RlbXB0aW1lJ10gPT0gMCA/ICfQvdC40LrQvtCz0LTQsCcgOiBkYXRlKCdkLW0tWSBIOmk6cycsJHVzZXJbJ3RlbXB0aW1lJ10pDQogICAgICAgICk7DQogICAgfQ0KICAgIA0KICAgIHByaXZhdGUgc3RhdGljIGZ1bmN0aW9uIGZpbHRlcl9pbnB1dCgkaW5wdXQsJG5hbWUsJGRlZmF1bHQ9bnVsbCl7DQogICAgICAgICRpbnAgPSBmaWx0ZXJfaW5wdXQoJGlucHV0LCRuYW1lKTsNCiAgICAgICAgcmV0dXJuICgkaW5wID09PSBudWxsKSB8fCAoJGlucCA9PT0gJycpID8gJGRlZmF1bHQgOiAkaW5wOw0KICAgIH0NCiAgICANCn0=ewogICAgInNjcmlwdHMiOnsKICAgICAgICAibWNfYmFubGlzdCI6ewogICAgICAgICAgICAiZmlsZSI6Im1jX2Jhbmxpc3QiLAogICAgICAgICAgICAiYWRtaW5fY2F0ZWdvcnkiOiJtaW5lY3JhZnQiLAogICAgICAgICAgICAiYWRtaW5fdGl0bGUiOiLQkdCw0L3Qu9C40YHRgiIsCiAgICAgICAgICAgICJhY3Rpb25zIjpbInNob3dMaXN0Iiwic2hvd0xpbmVzIiwiZmluZFVzZXIiLCJmaW5kVXNlckFqYXgiXQogICAgICAgIH0KICAgIH0KfQ==PGgzPtCf0YDQvtCy0LXRgNC40YLRjCDQu9C+0LPQuNC9PC9oMz4NCjxkaXYgY2xhc3M9ImlucHV0LWdyb3VwIj4NCiAgICA8c3BhbiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24iPtCb0L7Qs9C40L08L3NwYW4+DQogICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJiYW5saXN0X2NoZWNrdXNlcl9pbnAiIGNsYXNzPSJmb3JtLWNvbnRyb2wiLz4NCiAgICA8c3BhbiBjbGFzcz0iaW5wdXQtZ3JvdXAtYnRuIj48YnV0dG9uIGlkPSJiYW5saXN0X2NoZWNrdXNlcl9idG4iIGNsYXNzPSJidG4gYnRuLXN1Y2Nlc3MiPtCf0YDQvtCy0LXRgNC40YLRjDwvYnV0dG9uPjwvc3Bhbj4NCjwvZGl2Pg0KPGRpdiBpZD0iYmFubGlzdF9jaGVja3VzZXJfcmVzIj48L2Rpdj4NCjxzY3JpcHQ+DQogICAgJCgnI2Jhbmxpc3RfY2hlY2t1c2VyX2J0bicpLm9uKCdjbGljaycsZnVuY3Rpb24gKCl7DQogICAgICAgICQoJyNiYW5saXN0X2NoZWNrdXNlcl9yZXMnKS5sb2FkKCclaW5kZXglP2FqYXg9MSZ0eXBlPXNjcmlwdCZuYW1lPW1jX2Jhbmxpc3QmYWN0aW9uPWZpbmRVc2VyQWpheCZ1c2VybmFtZT0nK2VuY29kZVVSSUNvbXBvbmVudCgkKCcjYmFubGlzdF9jaGVja3VzZXJfaW5wJykudmFsKCkpKTsNCiAgICB9KTsNCjwvc2NyaXB0Pg==PGRpdiBpZD0ibG9hZF9wYWdlIj4gICAgDQogICAgPGJ1dHRvbiBpZD0ibG9hZF9wYWdlX2J0biI+0JfQsNCz0YDRg9C30LjRgtGMINC10YnRkTwvYnV0dG9uPg0KPC9kaXY+ewogICAgCiAgICAicmVxdWlyZXMiOlsicGljY29sb19wZG8iXSwKICAgICJ0aXRsZSI6ItCh0L/QuNGB0L7QuiDQt9Cw0LHQu9C+0LrQuNGA0L7QstCw0L3QvdGL0YUgKG1pbmVjcmFmdCkiLAogICAgCiAgICAiY29uZmlncyI6WwogICAgICAgIHsiZmlsZV9pbiI6ImNvcmUuanNvbiIsImZpbGVfb3V0IjoicGljY29sb19jb3JlLmpzb24iLCJtb2RlIjoibWVyZ2UifQogICAgXSwKICAgIAogICAgInNjcmlwdHMiOlsKICAgICAgICB7ImZpbGVfaW4iOiJiYW5saXN0LnBocCIsImZpbGVfb3V0IjoibWNfYmFubGlzdC5waHAiLCJtb2RlIjoicmVwbGFjZSJ9CiAgICBdLAogICAgCiAgICAidGVtcGxhdGVzIjpbCiAgICAgICAgeyJmaWxlX2luIjoidGFibGUuaHRtbCIsImZpbGVfb3V0Ijoic2NyaXB0cy9tY19iYW5saXN0L3RhYmxlLmh0bWwiLCJtb2RlIjoicmVwbGFjZSJ9LAogICAgICAgIHsiZmlsZV9pbiI6InRhYmxlX2xpbmUuaHRtbCIsImZpbGVfb3V0Ijoic2NyaXB0cy9tY19iYW5saXN0L3RhYmxlX2xpbmUuaHRtbCIsIm1vZGUiOiJyZXBsYWNlIn0sCiAgICAgICAgeyJmaWxlX2luIjoiZmluZHVzZXIuaHRtbCIsImZpbGVfb3V0Ijoic2NyaXB0cy9tY19iYW5saXN0L2ZpbmR1c2VyLmh0bWwiLCJtb2RlIjoicmVwbGFjZSJ9LAogICAgICAgIHsiZmlsZV9pbiI6InNldHRpbmdzLmh0bWwiLCJmaWxlX291dCI6InNjcmlwdHMvbWNfYmFubGlzdC9zZXR0aW5ncy5odG1sIiwibW9kZSI6InJlcGxhY2UifQogICAgXQogICAgCn0KPGgzPtCe0YHQvdC+0LLQvdGL0LUg0L3QsNGB0YLRgNC+0LnQutC4INCx0LDQvdC70LjRgdGC0LA8L2gzPg0KPGZvcm0gbWV0aG9kPSJQT1NUIj4NCiAgICANCiAgICBbbXNnXQ0KICAgIA0KICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImJhbmxpc3Rfc2V0dGluZ3NfcG9zdCIgdmFsdWU9IjEiLz4NCiAgICANCiAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCI+DQogICAgICAgIDxzcGFuIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiI+0J3QsNC30LLQsNC90LjQtSDRgtCw0LHQu9C40YbRiyDQsiDQkdCUPC9zcGFuPg0KICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0idGFibGVuYW1lIiBwbGFjZWhvbGRlcj0iYmFubGlzdCIgY2xhc3M9ImZvcm0tY29udHJvbCIgdmFsdWU9IltkYnRhYmxlXSIvPg0KICAgIDwvZGl2Pg0KPGJyLz4NCiAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCI+DQogICAgICAgIDxzcGFuIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiI+0JrQvtC7LdCy0L4g0YHRgtGA0L7QuiDQsiDRgdC/0LjRgdC60LU8L3NwYW4+DQogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJyb3dzX2NvdW50IiBwbGFjZWhvbGRlcj0iMTAiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIHZhbHVlPSJbb25fcGFnZV0iLz4NCiAgICA8L2Rpdj4NCjxici8+DQogICAgPGlucHV0IHR5cGU9InN1Ym1pdCIgdmFsdWU9ItCh0L7RhdGA0LDQvdC40YLRjCIgY2xhc3M9ImJ0biBidG4tc3VjY2VzcyBmb3JtLWNvbnRyb2wiLz4NCg0KPC9mb3JtPg0KDQo8aHIvPg0KDQo8ZGl2IGNsYXNzPSJwYW5lbCBwYW5lbC1pbmZvIj4NCiAgICA8ZGl2IGNsYXNzPSJwYW5lbC1oZWFkaW5nIiBpZD0iYmFubGlzdF9leGFtcGxlc19oZWFkaW5nIj7QmtC+0LTRiyDQtNC70Y8g0LLRgdGC0LDQstC60LggPHNwYW4gY2xhc3M9ImdseXBoaWNvbiBnbHlwaGljb24tb3B0aW9uLWhvcml6b250YWwgcHVsbC1yaWdodCI+PC9zcGFuPjwvZGl2Pg0KICAgIDxkaXYgY2xhc3M9InBhbmVsLWJvZHkiIGlkPSJiYW5saXN0X2V4YW1wbGVzX2JvZHkiPg0KICAgICAgICDQmtC+0LQg0LTQu9GPINCy0YHRgtCw0LLQutC4INGE0L7RgNC80Ys6IDxjb2RlPiYjNjA7Y29udGVudCB0eXBlPSJzY3JpcHQiIG5hbWU9Im1jX2Jhbmxpc3QiIGFjdGlvbj0iZmluZFVzZXIiLyYjNjI7PC9jb2RlPjxici8+PGJyLz4NCiAgICAgICAg0J/RgNC40LzQtdGAINGA0LDQsdC+0YLRizoNCiAgICAgICAgPGRpdiBjbGFzcz0id2VsbCI+DQogICAgICAgICAgICA8Y29udGVudCB0eXBlPSJzY3JpcHQiIG5hbWU9Im1jX2Jhbmxpc3QiIGFjdGlvbj0iZmluZFVzZXIiLz4NCiAgICAgICAgPC9kaXY+PGJyLz48YnIvPg0KICAgICAgICDQmtC+0LQg0LTQu9GPINCy0YHRgtCw0LLQutC4INGC0LDQsdC70LjRhtGLOiA8Y29kZT4mIzYwO2NvbnRlbnQgdHlwZT0ic2NyaXB0IiBuYW1lPSJtY19iYW5saXN0IiBhY3Rpb249InNob3dMaXN0Ii8mIzYyOzwvY29kZT48YnIvPjxici8+DQogICAgICAgINCf0YDQuNC80LXRgCDRgNCw0LHQvtGC0Ys6DQogICAgICAgIDxkaXYgY2xhc3M9IndlbGwiPg0KICAgICAgICAgICAgPGNvbnRlbnQgdHlwZT0ic2NyaXB0IiBuYW1lPSJtY19iYW5saXN0IiBhY3Rpb249InNob3dMaXN0Ii8+DQogICAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KPC9kaXY+DQoNCjxzY3JpcHQ+DQogICAgICAgICQoJyNiYW5saXN0X2V4YW1wbGVzX2JvZHknKS5zbGlkZVRvZ2dsZSgpOw0KICAgICQoJyNiYW5saXN0X2V4YW1wbGVzX2hlYWRpbmcnKS5vbignY2xpY2snLGZ1bmN0aW9uKCl7DQogICAgICAgICQoJyNiYW5saXN0X2V4YW1wbGVzX2JvZHknKS5zbGlkZVRvZ2dsZSgpOw0KICAgIH0pOw0KPC9zY3JpcHQ+PHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1ob3ZlciI+DQogICAgPHRoZWFkPg0KICAgICAgICA8dHI+PHRoPtCY0LPRgNC+0Lo8L3RoPjx0aD7Ql9Cw0LHQsNC90LjQuzwvdGg+PHRoPtCU0LDRgtCwINCx0LDQvdCwPC90aD48dGg+0JTQsNGC0LAg0YDQsNC30LHQsNC90LA8L3RoPjx0aD7Qn9GA0LjRh9C40L3QsCDQsdCw0L3QsDwvdGg+PC90cj4NCiAgICA8L3RoZWFkPg0KICAgIDx0Ym9keSBpZD0iYmFubGlzdF90Ym9keSI+DQogICAgICAgIFtsaW5lc10NCiAgICA8L3Rib2R5Pg0KPC90YWJsZT4NCjxidXR0b24gaWQ9ImJhbmxpc3RfbG9hZF9tb3JlIiBjbGFzcz0iZm9ybS1jb250cm9sIGJ0biBidG4tc3VjY2VzcyI+0JfQsNCz0YDRg9C30LjRgtGMINC10YnRkTwvYnV0dG9uPg0KPGJ1dHRvbiBpZD0iYmFubGlzdF9sb2FkaW5nIiBjbGFzcz0iZm9ybS1jb250cm9sIGJ0biBidG4tc3VjY2VzcyBkaXNhYmxlZCI+0JfQsNCz0YDRg9C30LrQsC4uLjwvYnV0dG9uPg0KPHNjcmlwdD4NCiAgICANCiAgICB2YXIgcGFnZSA9IDI7DQogICAgDQogICAgJCgnI2Jhbmxpc3RfbG9hZF9tb3JlJykuaGlkZSgpOw0KDQogICAgJC5nZXQoIiVpbmRleCU/YWpheD0xJnR5cGU9c2NyaXB0Jm5hbWU9bWNfYmFubGlzdCZhY3Rpb249c2hvd0xpbmVzJnBhZ2U9IitwYWdlLCBmdW5jdGlvbiAoZGF0YSkgew0KICAgICAgICBpZihkYXRhICE9PSAnJyl7DQogICAgICAgICAgICAkKCcjYmFubGlzdF9sb2FkX21vcmUnKS5zaG93KCk7DQogICAgICAgIH0NCiAgICAgICAgJCgnI2Jhbmxpc3RfbG9hZGluZycpLmhpZGUoKTsNCiAgICB9KTsNCg0KDQogICAgJCgnI2Jhbmxpc3RfbG9hZF9tb3JlJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkgew0KDQogICAgICAgICQoJyNiYW5saXN0X2xvYWRfbW9yZScpLmhpZGUoKTsNCiAgICAgICAgJCgnI2Jhbmxpc3RfbG9hZGluZycpLnNob3coKTsNCg0KICAgICAgICAkLmdldCgiJWluZGV4JT9hamF4PTEmdHlwZT1zY3JpcHQmbmFtZT1tY19iYW5saXN0JmFjdGlvbj1zaG93TGluZXMmcGFnZT0iK3BhZ2UsIGZ1bmN0aW9uIChkYXRhKSB7DQogICAgICAgICAgICAkKCcjYmFubGlzdF90Ym9keScpLmFwcGVuZChkYXRhKTsNCiAgICAgICAgICAgIHBhZ2UrKzsNCiAgICAgICAgfSk7DQogICAgICAgDQogICAgICAgIA0KICAgICAgICAkLmdldCgiJWluZGV4JT9hamF4PTEmdHlwZT1zY3JpcHQmbmFtZT1tY19iYW5saXN0JmFjdGlvbj1zaG93TGluZXMmcGFnZT0iKyhwYWdlKzEpLCBmdW5jdGlvbiAoZGF0YSkgew0KICAgICAgICAgICAgaWYoZGF0YSAhPT0gJycpew0KICAgICAgICAgICAgICAgICQoJyNiYW5saXN0X2xvYWRfbW9yZScpLnNob3coKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgICQoJyNiYW5saXN0X2xvYWRpbmcnKS5oaWRlKCk7DQogICAgICAgIH0pOw0KICAgICAgICANCiAgICB9KTsNCjwvc2NyaXB0Pg0KPHRyPg0KICAgIDx0ZD5bbmFtZV08L3RkPg0KICAgIDx0ZD5bYWRtaW5dPC90ZD4NCiAgICA8dGQ+W2RhdGVdPC90ZD4NCiAgICA8dGQ+W3RlbXBkYXRlXTwvdGQ+DQogICAgPHRkPltyZWFzb25dPC90ZD4NCjwvdHI+PHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1ob3ZlciI+DQogICAgPHRib2R5Pg0KICAgICAgICBbbGluZXNdDQogICAgPC90Ym9keT4NCjwvdGFibGU+DQoNClttb3JlX2J1dHRvbl0=ewogICAgInRpdGxlIjogItCR0LjQsdC70LjQvtGC0LXQutCwINC00LvRjyDRhtC10L3RgtGA0LDQu9C40LfQvtCy0LDQvdC90L7QuSDRgNCw0LHQvtGC0Ysg0YEgUERPIiwKICAgICJjb25maWdzIjogW3sKICAgICAgICAgICAgImZpbGVfaW4iOiAicGljY29sb19jb3JlLmpzb24iLAogICAgICAgICAgICAiZmlsZV9vdXQiOiAicGljY29sb19jb3JlLmpzb24iLAogICAgICAgICAgICAibW9kZSI6ICJtZXJnZSIKICAgICAgICB9LCB7CiAgICAgICAgICAgICJmaWxlX2luIjogInBpY2NvbG9fcGRvLmpzb24iLAogICAgICAgICAgICAiZmlsZV9vdXQiOiAicGljY29sb19wZG8uanNvbiIsCiAgICAgICAgICAgICJtb2RlIjogIm5ldyIKICAgICAgICB9XSwKICAgICJzY3JpcHRzIjogW3sKICAgICAgICAgICAgImZpbGVfaW4iOiAicF9wZG8ucGhwIiwKICAgICAgICAgICAgImZpbGVfb3V0IjogInBfcGRvLnBocCIsCiAgICAgICAgICAgICJtb2RlIjogInJlcGxhY2UiCiAgICAgICAgfV0sCiAgICAidGVtcGxhdGVzIjpbCiAgICAgICAgeyJmaWxlX2luIjoic2V0dGluZ3MuaHRtbCIsImZpbGVfb3V0Ijoic2NyaXB0cy9waWNjb2xvX3Bkby9zZXR0aW5ncy5odG1sIiwibW9kZSI6InJlcGxhY2UifSwKICAgICAgICB7ImZpbGVfaW4iOiJzYXZlZC5odG1sIiwiZmlsZV9vdXQiOiJzY3JpcHRzL3BpY2NvbG9fcGRvL3NldHRpbmdzX3NhdmVkLmh0bWwiLCJtb2RlIjoicmVwbGFjZSJ9CiAgICBdCiAgICAKCn0Kew0KICAgICJzY3JpcHRzIjp7DQogICAgICAgICJwaWNjb2xvX3BkbyI6ew0KICAgICAgICAgICAgImZpbGUiOiJwX3BkbyIsDQogICAgICAgICAgICAiYWRtaW5fY2F0ZWdvcnkiOiJzeXN0ZW0iLA0KICAgICAgICAgICAgImFkbWluX3RpdGxlIjoi0L3QsNGB0YLRgNC+0LnQutC4INCx0LDQt9GLINC00LDQvdC90YvRhSINCiAgICAgICAgfQ0KICAgIH0NCn0NCg==ew0KICAgICJkc24iOiAibXlzcWw6aG9zdD1sb2NhbGhvc3Q7ZGJuYW1lPXNpdGU7Y2hhcnNldD11dGY4IiwNCiAgICAiY29ubmVjdF9pbmZvIjogew0KICAgICAgICAidXNlcm5hbWUiOiAicm9vdCIsDQogICAgICAgICJwYXNzd29yZCI6ICJyb290IiwNCiAgICAgICAgInByZWZpeCI6ICIiDQogICAgfQ0KfQ==PD9waHANCg0KZmluYWwgY2xhc3MgcGljY29sb19wZG8gew0KDQogICAgLy/QndCw0YHRgtGA0L7QudC60LggUERPINC/0L4g0YPQvNC+0LvRh9Cw0L3QuNGODQogICAgcHJpdmF0ZSBzdGF0aWMgJGRzbjsNCiAgICBwcml2YXRlIHN0YXRpYyAkY29ubmVjdF9pbmZvOw0KICAgIHByaXZhdGUgc3RhdGljICRvcHQgPSBhcnJheSgNCiAgICAgICAgICAgIFBETzo6QVRUUl9FUlJNT0RFICAgICAgICAgICAgPT4gUERPOjpFUlJNT0RFX0VYQ0VQVElPTiwNCiAgICAgICAgICAgIFBETzo6QVRUUl9ERUZBVUxUX0ZFVENIX01PREUgPT4gUERPOjpGRVRDSF9BU1NPQw0KICAgICk7DQogICAgDQogICAgcHJpdmF0ZSBzdGF0aWMgJGRiID0gbnVsbDsNCiAgICANCiAgICAvL9CS0YvQtNCw0LXRgiDRgdGB0YvQu9C60YMg0L3QsCBQRE8NCiAgICBwdWJsaWMgc3RhdGljIGZ1bmN0aW9uIGdldFBETygpew0KICAgICAgICAvL9CV0YHQu9C4INGE0YPQvdC60YbQuNGPINCy0YvQt9GL0LLQsNC10YLRgdGPINC90LUg0LIg0L/QtdGA0LLRi9C5INGA0LDQtywg0YLQviDQstGL0LTQsNC10Lwg0YHRgdGL0LvQutGDINC90LAg0L7QsdGK0LXQutGCIFBETw0KICAgICAgICBpZihzZWxmOjokZGIgIT0gbnVsbCl7cmV0dXJuIHNlbGY6OiRkYjt9DQogICAgICAgIC8v0JPRgNGD0LfQuNC8INC90LDRgdGC0YDQvtC50LrQuCDQkdCUDQogICAgICAgICRjZmcgPSBXU0VfRU5HSU5FOjpsb2FkQ29uZmlnKCJwaWNjb2xvX3BkbyIpOw0KICAgICAgICBzZWxmOjokZHNuID0gJGNmZ1snZHNuJ107DQogICAgICAgIHNlbGY6OiRjb25uZWN0X2luZm8gPSAkY2ZnWydjb25uZWN0X2luZm8nXTsNCiAgICAgICAgLy/Qn9GL0YLQsNC10LzRgdGPINC/0L7QtNC60LvRjtGH0LjRgtGM0YHRjywg0LIg0YHQu9GD0YfQsNC1INC+0YjQuNCx0LrQuCwg0L/QviDQstC+0LfQvNC+0LbQvdC+0YHRgtC4LCDQu9C+0LPQuNGA0YPQtdC8INC+0YjQuNCx0LrRgw0KICAgICAgICB0cnl7DQogICAgICAgICAgICBzZWxmOjokZGIgPSBuZXcgUERPKHNlbGY6OiRkc24sc2VsZjo6JGNvbm5lY3RfaW5mb1sndXNlcm5hbWUnXSxzZWxmOjokY29ubmVjdF9pbmZvWydwYXNzd29yZCddLHNlbGY6OiRvcHQpOw0KICAgICAgICB9Y2F0Y2goUERPRXhjZXB0aW9uICRlKXsNCiAgICAgICAgICAgIGlmKFdTRV9FTkdJTkU6OmNoZWNrU2NyaXB0KCdwaWNjb2xvX2xvZycpKXsNCiAgICAgICAgICAgICAgICBwaWNjb2xvX2xvZzo6YWRkKCRlLT5nZXRNZXNzYWdlKCkscmVwb3J0c19sb2c6OkxFVkVMX0VSUk9SLCRlLT5nZXRUcmFjZUFzU3RyaW5nKCkpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIHJldHVybiBzZWxmOjokZGI7DQogICAgfQ0KICAgIA0KICAgIHB1YmxpYyBzdGF0aWMgZnVuY3Rpb24gYmluZEFkbWluUGFnZSgpew0KICAgICAgICANCiAgICAgICAgJGNmZyA9IFdTRV9FTkdJTkU6OmxvYWRDb25maWcoInBpY2NvbG9fcGRvIik7DQogICAgICAgICRtc2cgPSAnJzsNCiAgICAgICAgDQogICAgICAgIGlmKGZpbHRlcl9pbnB1dChJTlBVVF9QT1NULCdwZG9fc2V0dGluZ3NfcG9zdCcpICE9PSBudWxsKXsNCiAgICAgICAgICAgICRjZmdbJ2RzbiddID0gZmlsdGVyX2lucHV0KElOUFVUX1BPU1QsJ2RzbicpOw0KICAgICAgICAgICAgJGNmZ1snY29ubmVjdF9pbmZvJ11bJ3VzZXJuYW1lJ10gPSBmaWx0ZXJfaW5wdXQoSU5QVVRfUE9TVCwndXNlcm5hbWUnKTsNCiAgICAgICAgICAgICRjZmdbJ2Nvbm5lY3RfaW5mbyddWydwYXNzd29yZCddID0gZmlsdGVyX2lucHV0KElOUFVUX1BPU1QsJ3Bhc3N3b3JkJyk7DQogICAgICAgICAgICBQSUNDT0xPX0VOR0lORTo6dXBkYXRlQ29uZmlnKCdwaWNjb2xvX3BkbycsICRjZmcpOw0KICAgICAgICAgICAgc2VsZjo6JGRiID0gbnVsbDsNCiAgICAgICAgICAgICRtc2cgPSBQSUNDT0xPX0VOR0lORTo6Z2V0VG1wbCgncGljY29sb19wZG8vc2V0dGluZ3Nfc2F2ZWQnKTsNCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgcmV0dXJuIFBJQ0NPTE9fRU5HSU5FOjpnZXRSVG1wbCgncGljY29sb19wZG8vc2V0dGluZ3MnLCBhcnJheSgNCiAgICAgICAgICAgICdtc2cnPT4kbXNnLA0KICAgICAgICAgICAgJ2Rzbic9PiRjZmdbJ2RzbiddLA0KICAgICAgICAgICAgJ3VzZXJuYW1lJz0+JGNmZ1snY29ubmVjdF9pbmZvJ11bJ3VzZXJuYW1lJ10sDQogICAgICAgICAgICAncGFzc3dvcmQnPT4kY2ZnWydjb25uZWN0X2luZm8nXVsncGFzc3dvcmQnXQ0KICAgICAgICAgICAgICAgICkpOw0KICAgIH0NCiAgICANCn0=PGRpdiBjbGFzcz0iYWxlcnQgYWxlcnQtc3VjY2VzcyI+DQogICAg0J3QsNGB0YLRgNC+0LnQutC4INGB0L7RhdGA0LDQvdC10L3Riw0KPC9kaXY+W21zZ10NCjxmb3JtIG1ldGhvZD0iUE9TVCI+DQogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0icGRvX3NldHRpbmdzX3Bvc3QiIHZhbHVlPSIxIi8+DQogICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAiPg0KICAgICAgICA8c3BhbiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24iPkRTTjwvc3Bhbj4NCiAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0iZHNuIiB2YWx1ZT0iW2Rzbl0iIGNsYXNzPSJmb3JtLWNvbnRyb2wiLz4NCiAgICA8L2Rpdj4NCiAgICDQn9GA0LjQvNC10YAg0YHQvtGB0YLQsNCy0LvQtdC90LjRjyBEU046IDxiPm15c3FsOmhvc3Q9JdCw0LTRgNC10YFf0YHQtdGA0LLQtdGA0LBfbXlzcWwlO2RibmFtZT0l0L3QsNC30LLQsNC90LjQtV/QsdCw0LfRi1/QtNCw0L3QvdGL0YUlO2NoYXJzZXQ9dXRmODwvYj4sINCz0LTQtSAl0LDQtNGA0LXRgV/RgdC10YDQstC10YDQsF9teXNxbCUg0LggJdC90LDQt9Cy0LDQvdC40LVf0LHQsNC30Ytf0LTQsNC90L3Ri9GFJSDQvdC10L7QsdGF0L7QtNC40LzQviDQt9Cw0LzQtdC90LjRgtGMINC90LAg0LLQsNGI0Lgg0LTQsNC90L3Ri9C1Lg0KICAgIDxici8+PGJyLz4NCiAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCI+DQogICAgICAgIDxzcGFuIGNsYXNzPSJpbnB1dC1ncm91cC1hZGRvbiI+0JjQvNGPINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjzwvc3Bhbj4NCiAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0idXNlcm5hbWUiIHZhbHVlPSJbdXNlcm5hbWVdIiBjbGFzcz0iZm9ybS1jb250cm9sIi8+DQogICAgPC9kaXY+PGJyLz4NCiAgICAgICAgPGRpdiBjbGFzcz0iaW5wdXQtZ3JvdXAiPg0KICAgICAgICA8c3BhbiBjbGFzcz0iaW5wdXQtZ3JvdXAtYWRkb24iPtCf0LDRgNC+0LvRjDwvc3Bhbj4NCiAgICA8aW5wdXQgdHlwZT0icGFzc3dvcmQiIG5hbWU9InBhc3N3b3JkIiB2YWx1ZT0iW3Bhc3N3b3JkXSIgY2xhc3M9ImZvcm0tY29udHJvbCIvPg0KICAgIDwvZGl2Pjxici8+DQogICAgPGlucHV0IHR5cGU9InN1Ym1pdCIgdmFsdWU9ItCh0L7RhdGA0LDQvdC40YLRjCIgY2xhc3M9ImZvcm0tY29udHJvbCBidG4gYnRuLXN1Y2Nlc3MiLz4NCjwvZm9ybT4=PHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1ob3ZlciI+DQogICAgPHRoZWFkPjx0aD7QmNCz0YDQvtC6PC90aD48dGg+0JfQsNCx0LDQvdC40Ls8L3RoPjx0aD7QlNCw0YLQsCDQsdCw0L3QsDwvdGg+PHRoPtCU0LDRgtCwINGA0LDQt9Cx0LDQvdCwPC90aD48dGg+0J/RgNC40YfQuNC90LAg0LHQsNC90LA8L3RoPjwvdGhlYWQ+DQogICAgW2xpbmVzXQ0KPC90YWJsZT4=W3sicGF0aCI6InJld3JpdGUiLCJpbmZvIjoicGFja2FnZS5qc29uIn0seyJwYXRoIjoibWNfYmFubGlzdCIsImluZm8iOiJwYWNrYWdlLmpzb24ifSx7InBhdGgiOiJwaWNjb2xvX3BkbyIsImluZm8iOiJwYWNrYWdlLmpzb24ifV0=